# This is the final, complete CircleCI config file.
# It will build, test, push to ECR, and deploy to EKS.
version: 2.1

# 1. Orbs (reusable packages) for AWS and Kubernetes
orbs:
  # We have REMOVED the aws-ecr orb as it was causing errors.
  aws-cli: circleci/aws-cli@4.1.2
  kubernetes: circleci/kubernetes@1.3.1

# 2. Jobs (the "what")
jobs:
  # This job just builds and tests your Vite app
  build-and-test:
    docker:
      - image: cimg/node:18.17
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: npm install
      - run:
          name: Build Project
          command: npm run build
      # Persist the entire working directory (including Dockerfile, nginx.conf, etc.)
      # to the workspace for the next job.
      - persist_to_workspace:
          root: .
          paths:
            - .

  # This job builds the Docker image and pushes it to your ECR
  build-and-push-image:
    # Use a standard AWS image that has all tools
    docker:
      - image: cimg/aws:2024.06
    # This step is CRITICAL for running docker commands
    setup_remote_docker: true
    steps:
      # Get all the code from the previous job
      - attach_workspace:
          at: .
      # Set up the AWS region from the context
      - aws-cli/setup:
          region: ${AWS_REGION}
      # 1. Log in to AWS ECR manually
      - run:
          name: Log in to AWS ECR
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | \
            docker login \
              --username AWS \
              --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      # 2. Build and tag the Docker image
      - run:
          name: Build and Tag Docker Image
          command: |
            export ECR_REPO_URL="${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/pixcraft-repo"
            docker build -t $ECR_REPO_URL:latest .
      # 3. Push the Docker image to ECR
      - run:
          name: Push Docker Image to ECR
          command: |
            export ECR_REPO_URL="${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/pixcraft-repo"
            docker push $ECR_REPO_URL:latest

  # This job deploys your application to the EKS cluster
  deploy-to-kubernetes:
    docker:
      - image: cimg/base:stable
    steps:
      # This job needs a fresh checkout to get the k8s/ folder
      - checkout
      - aws-cli/setup:
          region: ${AWS_REGION}
      - kubernetes/install
      - run:
          name: "Configure Kubectl for EKS"
          # This command logs kubectl into your EKS cluster
          command: |
            aws eks update-kubeconfig \
              --name pixcraft-cluster \
              --region ${AWS_REGION}
      - run:
          name: "Deploy to EKS"
          # This applies your Kubernetes config files
          command: |
            kubectl apply -f k8s/deployment.yaml
            kubectl apply -f k8s/service.yaml
            # This forces the deployment to restart with the new image
            kubectl rollout restart deployment/pixcraft-deployment

# 3. Workflows (the "how and when")
workflows:
  build-test-and-deploy:
    jobs:
      # 1. Run the build/test job first
      - build-and-test

      # 2. After build-and-test, run OUR build-and-push-image job
      - build-and-push-image:
          requires:
            - build-and-test
          context:
            # "aws-creds" is the name of the Context
            # we created in CircleCI
            - aws-creds
          filters:
            branches:
              only:
                - main  # Only run this on the main branch

      # 3. After our image is pushed, deploy to Kubernetes
      - deploy-to-kubernetes:
          requires:
            # This dependency name MUST match our job name above
            - build-and-push-image
          context:
            - aws-creds
          filters:
            branches:
              only:
                - main  # Only run this on the main branch

