# Production-ready CircleCI configuration for PixCraft
# Builds, tests, pushes to ECR, and deploys to EKS
version: 2.1

# Orbs for AWS and Kubernetes
orbs:
  aws-cli: circleci/aws-cli@4.1.2
  kubernetes: circleci/kubernetes@1.3.1

# Jobs
jobs:
  # Build and test the Vite React app
  build-and-test:
    docker:
      - image: cimg/node:20.11  # Latest LTS Node version
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "package-lock.json" }}
            - v1-deps-
      - run:
          name: Install Dependencies
          command: npm ci  # Use ci for faster, more reliable installs
      - save_cache:
          key: v1-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Build Project
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - .

  # Build Docker image and push to ECR
  build-and-push-image:
    docker:
      - image: cimg/base:stable  # Stable base image
    resource_class: large
    steps:
      - setup_remote_docker:
          version: default
          docker_layer_caching: true  # Cache Docker layers for faster builds
      - attach_workspace:
          at: .
      - aws-cli/install
      - aws-cli/setup:
          region: ${AWS_REGION}
      - run:
          name: Log in to AWS ECR
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | \
            docker login \
              --username AWS \
              --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - run:
          name: Build Docker Image
          command: |
            export ECR_REPO_URL="${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/pixcraft-repo"
            export IMAGE_TAG="${CIRCLE_SHA1:0:7}"
            docker build \
              -t $ECR_REPO_URL:$IMAGE_TAG \
              -t $ECR_REPO_URL:latest \
              .
      - run:
          name: Push Docker Image to ECR
          command: |
            export ECR_REPO_URL="${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/pixcraft-repo"
            export IMAGE_TAG="${CIRCLE_SHA1:0:7}"
            docker push $ECR_REPO_URL:$IMAGE_TAG
            docker push $ECR_REPO_URL:latest
      - run:
          name: Save Image Tag
          command: |
            echo "${CIRCLE_SHA1:0:7}" > /tmp/image-tag.txt
      - persist_to_workspace:
          root: /tmp
          paths:
            - image-tag.txt

  # Deploy to EKS cluster
  deploy-to-kubernetes:
    docker:
      - image: cimg/base:stable
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - aws-cli/install
      - aws-cli/setup:
          region: ${AWS_REGION}
      - kubernetes/install-kubectl:
          kubectl-version: v1.29.0
      - run:
          name: Configure kubectl for EKS
          command: |
            aws eks update-kubeconfig \
              --name ${EKS_CLUSTER_NAME} \
              --region ${AWS_REGION}
      - run:
          name: Update Deployment with New Image
          command: |
            export IMAGE_TAG=$(cat /tmp/image-tag.txt)
            export ECR_REPO_URL="${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/pixcraft-repo"
            
            # Update the deployment image
            kubectl set image deployment/pixcraft-deployment \
              pixcraft=$ECR_REPO_URL:$IMAGE_TAG \
              --record
      - run:
          name: Apply Kubernetes Manifests
          command: |
            kubectl apply -f k8s/deployment.yaml
            kubectl apply -f k8s/service.yaml
      - run:
          name: Wait for Rollout
          command: |
            kubectl rollout status deployment/pixcraft-deployment --timeout=5m
      - run:
          name: Get Deployment Status
          command: |
            echo "=== Deployment Info ==="
            kubectl get deployments
            echo "=== Pod Status ==="
            kubectl get pods
            echo "=== Service Info ==="
            kubectl get services

# Workflows
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test:
          filters:
            branches:
              only:
                - main
                - develop
      
      - build-and-push-image:
          requires:
            - build-and-test
          context:
            - aws-creds
          filters:
            branches:
              only:
                - main
      
      - deploy-to-kubernetes:
          requires:
            - build-and-push-image
          context:
            - aws-creds
          filters:
            branches:
              only:
                - main
